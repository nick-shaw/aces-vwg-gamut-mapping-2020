set cut_paste_input [stack 0]
push $cut_paste_input
Group {
 name GamutCompress_blink
 label "\[value method] : \[value direction]"
 addUserKnob {20 GamutCompress}
 addUserKnob {4 method t "Choose the type of distance compression function you want to use" M {log reinhard power exp atan tanh ""}}
 method power
 addUserKnob {6 use_gpu l "use gpu" t "use gpu for blinkscript node" -STARTLINE}
 use_gpu true
 addUserKnob {18 threshold t "Percentage of the gamut protect. A value of 0.8 means 20% of the outer gamut will be utilized for gamut compression." R 0.4 1}
 threshold 0.8
 addUserKnob {6 threshold_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 power t "Adjust the aggressiveness of the curve when method is set to power. 1 is equal to reinhard. higher values bias compressed values closer to the gamut boundary." R 1 3}
 power 1.2
 addUserKnob {26 distance_limit_label l " " t "Specifies the distance beyond the gamut boundary to map to the gamut boundary for each color component." T "<b>distance limit"}
 addUserKnob {7 cyan t "Maximum distance beyond the green-blue gamut boundary to compress to the gamut boundary." R 0.001 1}
 cyan 0.09
 addUserKnob {7 magenta t "Maximum distance beyond the blue-red gamut boundary to compress to the gamut boundary." R 0.001 1}
 magenta 0.24
 addUserKnob {7 yellow t "Maximum distance beyond the red-green gamut boundary to compress to the gamut boundary." R 0.001 1}
 yellow 0.12
 addUserKnob {6 hexagonal t "Compress secondary colors in addition to primary colors. Uses variation on the algorithm suggested by Nick Shaw https://community.acescentral.com/t/a-variation-on-jeds-rgb-gamut-mapper/3060" +STARTLINE}
 addUserKnob {6 overlay l "graph overlay" +STARTLINE}
 addUserKnob {22 reset t "Reset knobs to default values. Distance limits are calculated based on an the average of a selection of digital cinema cameras." T "n = nuke.thisNode()\nnuke.root().begin()\ndefaults = \{\n    'threshold': 0.8,\n    'power': 1.2,\n    'cyan': 0.09,\n    'magenta':0.24,\n    'yellow': 0.12,\n\}\nfor k, v in defaults.items():\n    n\[k].setValue(v)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 direction M {forward inverse}}
 addUserKnob {20 info_tab l Info}
 addUserKnob {26 info_label l " " T "<style> a:link \{ color: #ccc \}</style>\n<font color=#ccc>\n<b>GamutCompress</b><br>\nmaps out of gamut colors back into gamut.\n<br><br><a href=https://github.com/colour-science/aces-vwg-gamut-mapping-2020/tree/master/model>Documentation</a>"}
 addUserKnob {26 about_label l " " T "<style> a:link \{ color: #ccc \}</style>\n<font color=#ccc><br>\n<b>About</b><br>\nWritten by <a href=https://github.com/jedypod color=red>Jed Smith</a> <br> with <a href=https://community.acescentral.com/t/rgb-saturation-gamut-mapping-approach-and-a-comp-vfx-perspective>help</a> from the <a href=https://community.acescentral.com/c/aces-development-acesnext/vwg-aces-gamut-mapping-working-group>ACES Gamut Mapping VWG</a>"}
}
 Input {
  inputs 0
  name Input
  xpos -40
  ypos -10
 }
 AddChannels {
  name AddChannels
  xpos -40
  ypos 32
 }
 BlinkScript {
  recompileCount 23
  ProgramGroup 1
  KernelDescription "2 \"GamutCompression\" iterate pixelWise ba2aaad5a0ee143ea6eeecc32e0d5edb337bd26cf8fb56c1694908caf462b21a 2 \"src\" Read Point \"dst\" Write Point 11 \"threshold\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"p\" Float 1 AAAAAA== \"shd_rolloff\" Float 1 AAAAAA== \"cyan\" Float 1 AAAAAA== \"magenta\" Float 1 AAAAAA== \"yellow\" Float 1 AAAAAA== \"p_Height\" Float 1 AAAAAA== \"method\" Int 1 AAAAAA== \"hexagonal\" Bool 1 AA== \"invert\" Bool 1 AA== \"overlay\" Bool 1 AA== 11 \"threshold\" 3 1 \"p\" 1 1 \"shd_rolloff\" 1 1 \"cyan\" 1 1 \"magenta\" 1 1 \"yellow\" 1 1 \"p_Height\" 1 1 \"method\" 1 1 \"hexagonal\" 1 1 \"invert\" 1 1 \"overlay\" 1 1 3 \"thr\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"lim\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"pi\" Float 1 1 AAAAAA=="
  kernelSource "kernel GamutCompression : public ImageComputationKernel<ePixelWise> \{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eWrite> dst;\n\n  param:\n    float3 threshold;\n    float p;\n    float shd_rolloff;\n    float cyan;\n    float magenta;\n    float yellow;\n    float p_Height;\n    int method;\n    bool hexagonal;\n    bool invert;\n    bool overlay;\n\n  local:\n  float3 thr;\n  float3 lim;\n  float pi;\n\n  void init() \{\n    pi = 3.14159265359;\n\n    // thr is the percentage of the core gamut to preserve\n    thr = float3(min(0.9999f, threshold.x), min(0.9999f, threshold.y), min(0.9999f, threshold.z));\n\n    // lim is the max distance from the gamut boundary that will be compressed\n    // 0 is a no-op, 1 will compress colors from a distance of 2.0 from achromatic to the gamut boundary\n    // if method is Reinhard or Power, use the limit as-is\n    if (method == 1 || method == 2) \{\n      lim = float3(cyan+1.0f, magenta+1.0f, yellow+1.0f);\n    \} else \{\n      // otherwise, we have to bruteforce the value of limit \n      // such that lim is the value of x where y=1.0f\n      // importantly, this runs once at the beginning of evaluation, NOT per-pixel!!!\n      lim = float3(\n        bisect(max(0.0001f, cyan)+1.0f, thr.x),\n        bisect(max(0.0001f, magenta)+1.0f, thr.y),\n        bisect(max(0.0001f, yellow)+1.0f, thr.z));\n    \}\n  \}\n\n  // calculate hyperbolic tangent\n  float tanh( float in) \{\n    float f = exp(2.0f*in);\n    return (f-1.0f) / (f+1.0f);\n  \}\n\n  // calculate inverse hyperbolic tangent\n  float atanh( float in) \{\n    return log((1.0f+in)/(1.0f-in))/2.0f;\n  \}\n\n  // compression function which gives the y=1 x intersect at y=0\n  float f(float x, float k, float t) \{\n    if (method == 0) \{\n      // natural logarithm compression method\n      return (exp((1.0f-t+t*log(1.0f-x)-x*t*log(1.0f-x))/(t*(1.0f-x))))*t+x*t-k;\n    \} else if (method == 1 || method == 2) \{\n      return k;\n    \} else if (method == 3) \{ \n      // natural exponent compression method\n      return -log((-x+1.0f)/(t-x))*(-t+x)+t-k;\n    \} else if (method == 4) \{\n      // arctangent compression method\n      return (2*tan( (pi*(1.0f-t))/(2.0f*(x-t)))*(x-t))/pi+t-k;\n    \} else if (method == 5) \{\n      // hyperbolic tangent compression method\n      return atanh((1.0f-t)/(x-t))*(x-t)+t-k;\n    \}\n  \}\n\n  int _sign(float x) \{\n    return x == 0.0f ? 0.0f : x > 0.0f ? 1.0f : 0.0f;\n  \}\n\n  float bisect(float k, float t) \{\n    // use a simple bisection algorithm to bruteforce the root of f\n    // returns an approximation of the value of limit \n    // such that the compression function intersects y=1 at desired value k\n    // this allows us to specify the max distance we will compress to the gamut boundary\n    \n    float a, b, c, y;\n    float tol = 0.0001f; // accuracy of estimate\n    int nmax = 100; // max iterations\n\n    // set up reasonable initial guesses for each method given output ranges of each function\n    if (method == 0) \{\n      // natural logarithm needs a limit between -inf (linear), and 1 (clip)\n      a = -15.0f;\n      b = 0.98f;\n    \} else if (method == 5) \{\n      // tanh needs more precision\n      a = 1.000001f;\n      b = 5.0f;\n    \} else \{\n      a = 1.0001f;\n      b = 5.0f;\n    \}\n\n    if (_sign(f(a, k, t)) == _sign(f(b, k, t))) \{\n      // bad estimate. return something close to linear\n      if ((method == 0) || (method == 2)) \{\n        return -100.0f;\n      \} else \{\n        return 1.999999f;\n      \}\n    \}\n    c = (a+b)/2.0f;\n    y = f(c, k, t);\n    if (fabs(y) <= tol) \{\n      return c; // lucky guess\n    \}\n\n    int n = 1;\n    while ((fabs(y) > tol) && (n <= nmax)) \{\n      if (_sign(y) == _sign(f(a, k, t))) \{\n        a = c;\n      \} else \{\n        b = c;\n      \}\n      c = (a+b)/2.0f;\n      y = f(c, k, t);\n      n += 1;\n    \}\n    return c;\n  \}\n\n\n  // calculate compressed distance\n  float compress(float x, float l, float t) \{\n    float cx, s;\n    if (x < t) \{\n      cx = x;\n    \} else \{\n      if (method == 0) \{\n        // natural logarithm compression method: https://www.desmos.com/calculator/hmzirlw7tj\n        // inspired by ITU-R BT.2446 http://www.itu.int/pub/R-REP-BT.2446-2019\n        if (invert == 0) \{\n          cx = t*log(x/t-l)-l*t*log(x/t-l)+t-t*log(1.0f-l)+l*t*log(1.0f-l);\n        \} else \{\n          cx = exp((x-t+t*log(1.0f-l)-l*t*log(1.0f-l))/(t*(1.0f-l)))*t+l*t;\n        \}\n      \} else if (method == 1) \{\n        // simple Reinhard type compression method: https://www.desmos.com/calculator/lkhdtjbodx\n        if (invert == 0) \{\n          cx = t+1.0f/(1.0f/(x-t)+1.0f/(1.0f-t)-1.0f/(l-t));\n        \} else \{\n          cx = t+1.0f/(1.0f/(x-t)-1.0f/(1.0f-t)+1.0f/(l-t));\n        \}\n      \} else if (method == 2) \{\n        // power(p) compression function plot https://www.desmos.com/calculator/54aytu7hek\n        if (l < 1.0001) \{\n          return x; // disable compression, avoid nan\n        \}\n        s = (l-t)/pow(pow((1.0f-t)/(l-t),-p)-1.0f,1.0f/p); // calc y=1 intersect\n        if (invert == 0) \{\n          cx = t+s*((x-t)/s)/(pow(1.0f+pow((x-t)/s,p),1.0f/p)); // compress\n        \} else \{\n          if (x > (t + s)) \{\n            cx = x; // avoid singularity\n          \}\n          cx = t+s*pow(-(pow((x-t)/s,p)/(pow((x-t)/s,p)-1.0f)),1.0f/p); // uncompress\n        \}\n      \} else if (method == 3) \{\n        // natural exponent compression method: https://www.desmos.com/calculator/s2adnicmmr\n        if (invert == 0) \{\n          cx = l-(l-t)*exp(-(((x-t)*((1.0f*l)/(l-t))/l)));\n        \} else \{\n          cx = -log((x-l)/(t-l))*(-t+l)/1.0f+t;\n        \}\n      \} else if (method == 4) \{\n        // arctangent compression method: https://www.desmos.com/calculator/h96qmnozpo\n        if (invert == 0) \{\n          cx = t+(l-t)*2/pi*atan(pi/2*(x-t)/(l-t));\n        \} else \{\n          cx = t+(l-t)*2/pi*tan(pi/2*(x-t)/(l-t));\n        \}\n      \} else if (method == 5) \{\n        // hyperbolic tangent compression method: https://www.desmos.com/calculator/xiwliws24x\n        if (invert == 0) \{\n          cx = t+(l-t)*tanh(((x-t)/(l-t)));\n        \} else \{\n          cx = t+(l-t)*atanh(x/(l-t)-t/(l-t));\n        \}\n      \}\n    \}\n    return cx;\n  \}\n\n\n  void process(int2 pos) \{\n    // source pixels\n    SampleType(src) rgba = src();\n    float3 rgb = float3(rgba.x, rgba.y, rgba.z);\n\n    // normalised pixel coordinates\n    float2 fpos = float2((float)pos.x / dst.bounds.width(), (float)pos.y / p_Height);\n\n    // achromatic axis \n    float ach = max(rgb.x, max(rgb.y, rgb.z));\n\n    // distance from the achromatic axis for each color component aka inverse rgb ratios\n    // distance is normalized by achromatic, so that 1.0f is at gamut boundary, avoid 0 div\n    float3 dist = ach == 0 ? float3(0.0f, 0.0f, 0.0f) : fabs((ach-rgb)/ach);\n\n    // compress distance with user controlled parameterized shaper function\n    float sat;\n    float3 csat, cdist;\n    if (hexagonal) \{\n      sat = max(dist.x, max(dist.y, dist.z));\n      csat = float3(\n        compress(sat, lim.x, thr.x),\n        compress(sat, lim.y, thr.y),\n        compress(sat, lim.z, thr.z));\n      cdist = sat == 0 ? dist : float3(\n        dist.x * csat.x / sat,\n        dist.y * csat.y / sat,\n        dist.z * csat.z / sat);\n    \} else \{\n      cdist = float3(\n        compress(dist.x, lim.x, thr.x),\n        compress(dist.y, lim.y, thr.y),\n        compress(dist.z, lim.z, thr.z));\n    \}\n\n    // recalculate rgb from compressed distance and achromatic\n    // effectively this scales each color component relative to achromatic axis by the compressed distance\n    float3 crgb = ach-cdist*fabs(ach);\n\n    // Graph overlay method based on one by Paul Dore\n    // https://github.com/baldavenger/DCTLs/tree/master/ACES%20TOOLS\n    if (overlay) \{\n      float3 cramp = float3(\n        compress(2.0f * fpos.x, lim.x, thr.x),\n        compress(2.0f * fpos.x, lim.y, thr.y),\n        compress(2.0f * fpos.x, lim.z, thr.z));\n      bool overlay_r = fabs(2.0f * fpos.y - cramp.x) < 0.004f || fabs(fpos.y - 0.5f) < 0.0005f ? true : false;\n      bool overlay_g = fabs(2.0f * fpos.y - cramp.y) < 0.004f || fabs(fpos.y - 0.5f) < 0.0005f ? true : false;\n      bool overlay_b = fabs(2.0f * fpos.y - cramp.z) < 0.004f || fabs(fpos.y - 0.5f) < 0.0005f ? true : false;\n      crgb.x = overlay_g || overlay_b ? 1.0f : crgb.x;\n      crgb.y = overlay_b || overlay_r ? 1.0f : crgb.y;\n      crgb.z = overlay_r || overlay_g ? 1.0f : crgb.z;\n    \}\n\n    // write to output\n    dst() = float4(crgb.x, crgb.y, crgb.z, rgba.w);\n  \}\n\};"
  useGPUIfAvailable {{parent.use_gpu}}
  rebuild ""
  GamutCompression_threshold {{parent.threshold} {parent.threshold} {parent.threshold}}
  GamutCompression_p {{parent.power}}
  GamutCompression_shd_rolloff {{parent.shd_rolloff}}
  GamutCompression_cyan {{parent.cyan}}
  GamutCompression_magenta {{parent.magenta}}
  GamutCompression_yellow {{parent.yellow}}
  GamutCompression_p_Height {{height}}
  GamutCompression_method {{parent.method}}
  GamutCompression_hexagonal {{parent.hexagonal}}
  GamutCompression_invert {{parent.direction}}
  GamutCompression_overlay {{parent.overlay}}
  rebuild_finalise ""
  name GamutCompress
  selected true
  xpos -40
  ypos 80
 }
 Output {
  name Output
  xpos -40
  ypos 134
 }
end_group
